{ "swagger": "2.0", "info": {  "description": "This documentation is for v2.0 of Upodi API. The URLs listed in this documentation are relative to https://api.upodi.io/v2.",  "version": "2.0.1",  "title": "Upodi API" }, "host": "api.upodi.io", "basePath": "/v2", "schemes": [  "https" ], "consumes": [  "application/json" ], "produces": [  "application/json" ], "paths": {  "/customers": {   "get": {    "tags": [     "customer"    ],    "summary": "Get list of all customers.",    "description": "Returns a list of customers. | Requires API scope 'read'.",    "operationId": "ListCustomer",    "parameters": [],    "responses": {     "200": {      "description": "OK",      "schema": {       "type": "array",       "items": {        "$ref": "#/definitions/Customer"       }      }     }    },    "security": [     {      "Bearer": []     }    ]   },   "post": {    "tags": [     "customer"    ],    "summary": "Create a customer.",    "description": "Creates a new customer and returns the id of the newly created object. \n#### API Token scope\n* write.\n",    "operationId": "CreateCustomer",    "parameters": [     {      "in": "body",      "name": "customer",      "required": true,      "schema": {       "$ref": "#/definitions/Customer"      }     }    ],    "responses": {     "201": {      "description": "Created. Body contains the id of the newly created object."     }    },    "security": [     {      "Bearer": []     }    ]   },   "put": {    "tags": [     "customer"    ],    "summary": "Update a customer.",    "description": "Updates an existing customer. \n#### API Token scope\n* write.\n",    "operationId": "UpdateCustomer",    "parameters": [     {      "in": "body",      "name": "customer",      "required": true,      "schema": {       "$ref": "#/definitions/Customer"      }     }    ],    "responses": {     "204": {      "description": "No content."     }    },    "security": [     {      "Bearer": []     }    ]   }  },  "/customers/{id}": {   "get": {    "tags": [     "customer"    ],    "description": "Return single customer.",    "parameters": [     {      "name": "id",      "in": "path",      "description": "ID of customer",      "required": true,      "type": "string"     }    ],    "responses": {     "200": {      "description": "OK",      "schema": {       "type": "object",       "properties": {}      }     }    },    "security": [     {      "Bearer": []     }    ]   },   "delete": {    "tags": [     "customer"    ],    "description": "Deletes a known customer.",    "parameters": [     {      "name": "id",      "in": "path",      "description": "ID of customer",      "required": true,      "type": "string"     }    ],    "responses": {     "204": {      "description": "No content."     }    },    "security": [     {      "Bearer": []     }    ]   }  },  "/customers/{id}/assigncardtoken/": {   "put": {    "tags": [     "customer",     "creditcard"    ],    "summary": "Assigns a card.",    "description": "Assigns a card to a customer and maps it as a payment method.\n#### API Token scope\n* write.\n",    "operationId": "AssignCardToken",    "parameters": [     {      "name": "id",      "in": "path",      "description": "ID of customer",      "required": true,      "type": "string"     },     {      "in": "body",      "name": "cardToken",      "required": true,      "schema": {       "$ref": "#/definitions/CardToken"      }     }    ],    "responses": {     "204": {      "description": "No content."     }    },    "security": [     {      "Bearer": []     }    ]   }  },  "/subscriptions": {   "get": {    "tags": [     "subscription"    ],    "description": "Returns a list of subscriptions. Requires API scope 'read'.",    "parameters": [],    "responses": {     "200": {      "description": "OK"     }    },    "security": [     {      "Bearer": []     }    ]   }  } }, "securityDefinitions": {  "Bearer": {   "description": "Key must be Base64 encoded. Syntax 'Bearer {apiKey}'.",   "type": "apiKey",   "name": "Authorization",   "in": "header"  } }, "definitions": {  "Customer": {   "type": "object",   "required": [    "fullname",    "id"   ],   "properties": {    "id": {     "type": "string"    },    "fullname": {     "type": "string"    }   }  },  "CardToken": {   "type": "object",   "properties": {    "token": {     "type": "string"    }   }  } }}
